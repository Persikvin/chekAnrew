const terminalOutput = document.getElementById('terminalOutput');

function typeText(text, speed = 20, callback = null) {
    let i = 0;
    const interval = setInterval(() => {
        if (i < text.length) {
            terminalOutput.innerHTML += text.charAt(i);
            i++;
            terminalOutput.scrollTop = terminalOutput.scrollHeight;
        } else {
            clearInterval(interval);
            if (callback) callback();
        }
    }, speed);
}

function addLine(text, speed = 20, callback = null) {
    terminalOutput.innerHTML += '<br>';
    typeText(text, speed, callback);
}

// –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã
setTimeout(() => {
    typeText('Initializing BIOS... OK', 50, () => {
        setTimeout(() => {
            addLine('Checking RAM... 4096MB OK', 30, () => {
                setTimeout(() => {
                    addLine('Detecting CPU... Intel Core i7-13700K @ 5.4GHz', 30, () => {
                        setTimeout(() => {
                            addLine('ANDREW_SYSTEM v1.3.7 READY', 30);
                        }, 1000);
                    });
                }, 800);
            });
        }, 400);
    });
}, 200);
// –§–µ–π–∫–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
function generateSystemStatus() {
  const statusMessages = [
    `[SYSTEM] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–∞: ${Math.random() > 0.3 ? '‚úÖ –£–≥—Ä–æ–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' : '‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω RiskWare (–£–¥–∞–ª–µ–Ω–æ)'}`,
    `[SYSTEM] –î–æ–Ω–∞—Ç—ã: ${Math.random() > 0.6 ? 'üí∞ TRUE (–ù–æ–≤—ã–π –¥–æ–Ω–∞—Ç!)' : '‚ùå FALSE'}`,
    `[SYSTEM] CPU: ${Math.floor(20 + Math.random() * 60)}% (${Math.random() > 0.7 ? '–ü–µ—Ä–µ–≥—Ä–µ–≤!' : '–ù–æ—Ä–º–∞'})`,
    `[SYSTEM] RAM: ${Math.floor(2 + Math.random() * 6)}GB/${Math.floor(8 + Math.random() * 8)}GB`,
    `[SYSTEM] –î–∏—Å–∫ C: ${Math.floor(30 + Math.random() * 60)}% –∑–∞–ø–æ–ª–Ω–µ–Ω`,
    `[SYSTEM] –°–µ—Ç—å: ${Math.random() > 0.8 ? '‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π –ø–∏–Ω–≥' : '–°—Ç–∞–±–∏–ª—å–Ω–æ'}`,
    `[SYSTEM] –ü—Ä–æ—Ü–µ—Å—Å—ã: ${Math.floor(80 + Math.random() * 200)} (${Math.random() > 0.9 ? '–û–±–Ω–∞—Ä—É–∂–µ–Ω –º–∞–π–Ω–µ—Ä! üö®' : '–ù–æ—Ä–º–∞'})`
  ];
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è (—Ä–µ–¥–∫–∏–µ)
  const rareEvents = [
    '[CRITICAL] –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç—Ä–æ—è–Ω: Trojan.Win32.Generic!',
    '[ALERT] –ö—Ç–æ-—Ç–æ –ø—ã—Ç–∞–µ—Ç—Å—è –≤–∑–ª–æ–º–∞—Ç—å —Å–∏—Å—Ç–µ–º—É!',
    '[MINING] –ó–∞–ø—É—â–µ–Ω —Å–∫—Ä—ã—Ç—ã–π –º–∞–π–Ω–∏–Ω–≥ Bitcoin...',
    '[SYSTEM] –ê–Ω–¥—Ä–µ–π –∑–∞–±—ã–ª –≤—ã–∫–ª—é—á–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω!'
  ];
  
  // 10% —à–∞–Ω—Å –Ω–∞ —Ä–µ–¥–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ
  return Math.random() > 0.9 
    ? rareEvents[Math.floor(Math.random() * rareEvents.length)]
    : statusMessages[Math.floor(Math.random() * statusMessages.length)];
}

// –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
function startSystemMonitoring() {
  // –ü–µ—Ä–≤—ã–π —Å—Ç–∞—Ç—É—Å —Å—Ä–∞–∑—É
  addLine(generateSystemStatus());
  
  // –ò–Ω—Ç–µ—Ä–≤–∞–ª 5-15 —Å–µ–∫—É–Ω–¥
  setInterval(() => {
    addLine(generateSystemStatus());
  }, 5000 + Math.random() * 10000);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
  startSystemMonitoring();
  
  // –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Twitch (WebSocket-–≤–µ—Ä—Å–∏—è)
  try {
    const socket = new WebSocket('wss://irc-ws.chat.twitch.tv:443');
    
    socket.onopen = () => {
      socket.send('CAP REQ :twitch.tv/tags twitch.tv/commands');
      socket.send('PASS justinfan12345');
      socket.send('NICK justinfan12345');
      socket.send('JOIN #andrusha_wav');
      addLine('[SYSTEM] Twitch —á–∞—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω!');
    };
    
    socket.onmessage = (event) => {
      if (event.data.includes('PRIVMSG')) {
        const user = event.data.split('display-name=')[1]?.split(';')[0] || '–ê–Ω–æ–Ω–∏–º';
        const msg = event.data.split('PRIVMSG #andrusha_wav :')[1];
        addLine(`[CHAT] ${user}: ${msg}`);
      }
      if (event.data.startsWith('PING')) {
        socket.send('PONG :tmi.twitch.tv');
      }
    };
    
      // –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–æ—Å—Ç—É–ø–Ω–æ–π –≥–ª–æ–±–∞–ª—å–Ω–æ
      window.addLine = function(text) {
          const terminalOutput = document.getElementById('terminalOutput');
          const line = document.createElement('div');
          line.textContent = text;
          terminalOutput.appendChild(line);
          terminalOutput.scrollTop = terminalOutput.scrollHeight;
          // –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
          window.addLine = function(text) {
              const terminal = document.getElementById('terminalOutput');
              const line = document.createElement('div');

              // –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º
              line.textContent = cleanText(text);
              terminal.appendChild(line);

              // –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞
              terminal.scrollTop = terminal.scrollHeight;
          };

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
          function cleanText(text) {
              return String(text)
                  .replace(/[\u0000-\u001F\u007F-\u009F]/g, '') // –£–¥–∞–ª—è–µ–º —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã
                  .replace(/[^\w\u0400-\u04FF\s.,!?@#$%^&*()\-+=:;'"<>{}[\]|\\\/]/gu, '') // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                  .replace(/\s+/g, ' ') // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
                  .trim()
                  .slice(0, 300); // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã
          }

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
          document.addEventListener('DOMContentLoaded', function() {
              addLine('> –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');

              function cleanText(text) {
                  return String(text)
                      .normalize('NFKC') // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è Unicode
                      .replace(/[\x00-\x1F\x7F-\x9F]/g, '') // –£–¥–∞–ª—è–µ–º —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã
                      .replace(/[^\w\u0400-\u04FF\s.,!?\-+=:;'"@#$%^&*()]/gu, '') // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                      .replace(/\s+/g, ' ')
                      .trim();
              }
          });
      }
  }
});